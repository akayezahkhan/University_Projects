module ALU(
	 input ALUSrcA,
    input [1:0] ALUSrcB,
	 input [31:0] PC_out,
    input [31:0] A_out,
	 input [31:0] B_out,
    input [31:0] constant,
	 input [3:0] ALUopcode,
    output reg Zero,
    output reg [31:0] ALUresult
    );

  wire [31:0] aluin1;
  assign aluin1 = ALUSrcA ? A_out : PC_out ;
  //wire [31:0] aluin2;
  //assign aluin2 = ALUSrcB[1] ? (ALUSrcB[0] ? constant : constant  ) : (ALUSrcB[0] ?  32'd1 : B_out ) ;
  reg [31:0] aluin2;
  always@(*)
  begin
  case(ALUSrcB)
  2'b00: 
  aluin2<=B_out;
  2'b01:
  aluin2<=32'b1;
  2'b10:
  aluin2<=constant;
  2'b11:
  aluin2<=constant;
  endcase
  end
  always@(*)
  begin
      if (ALUopcode == 4'b 0010)
          ALUresult <= aluin1 + aluin2;           	 //add//
      else if (ALUopcode == 4'b 0110)
        begin
          ALUresult <= aluin2 - aluin1;            	//subtract//
          if (ALUresult == 32'b 0)
            Zero <= 1;
          else if (ALUresult != 32'b 0)
            Zero <= 0;
        end
      else if (ALUopcode == 4'b 0000)
          ALUresult <= aluin1 & aluin2;           	 //bitwise AND//
      else if (ALUopcode == 4'b 0001)
          ALUresult <= aluin1 | aluin2;           	 //bitwise OR//
      else if (ALUopcode == 4'b 0111)
          ALUresult <= aluin1 << aluin2; 	      //shift left//
  end


endmodule