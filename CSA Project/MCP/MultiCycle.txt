module ProcessorMC(
  input clk,
  input rst,
  // control signals
  output IRWrite,MemtoReg,MemWrite,MemRead,IorD,PCWrite,PCWriteCond,ALUSrcA,RegWrite,RegDst,
  output [1:0] PCSource,ALUOp,ALUSrcB,
  //pc stuff
  output [31:0] PC_out,
  output [31:0] jump_address,
  output [31:0] ALUresult,
  output [31:0] ALU_out,
  //memory
  output [31:0] write_data,
  output [31:0] MemData,
  //Instruction reg stuff
  output [31:0] IR_out,		//instruction
  //Memory data reg stuff
  output[31:0] MDR_out,	// data from RAM
  //decoder stuff
  output [5:0] opcode,
  output [4:0] Rs,Rt,Rd,shamt,
  output [5:0] funct,
  output [31:0] constant,
  //ALU control stuff
  output [3:0] ALUopcode,
  //Register file
  output [31:0] rwrite_data,
  output [31:0] regout1,regout2,
  //registers
  output [31:0] A_out,B_out
  //ALU
    // everything defined
  //Data Memory
	 // everything defined
  );

  assign write_data = B_out;
  
  assign rwrite_data = MemtoReg ?  MDR_out : ALU_out ;
  
  ProgramCounter pc_obj(clk,rst,PCWrite,PCWriteCond,Zero,PCSource,ALUresult,ALU_out,jump_address,PC_out);

  Memory mem_obj(clk,IorD,ALU_out,PC_out,MemRead,MemWrite,B_out,MemData);

  Memory_data_register RAM(clk,rst,MemData,MDR_out);
  
  Instruction_reg ROM(clk,rst,IRWrite,MemData,IR_out);

  Decoder decoder_obj(clk,PC_out,IR_out,opcode,Rs,Rt,Rd,shamt,funct,constant,jump_address);
  
  RegFile regfile_obj(clk,RegDst,MemtoReg,ALUOp,RegWrite,Rs,Rt,Rd,ALU_out,MDR_out,regout1,regout2);
 
  Areg areg(clk,rst,regout1,A_out);
  
  Breg breg(clk,rst,regout2,B_out);

  Control control_obj(clk,rst,opcode,RegDst,RegWrite,ALUSrcA,ALUSrcB,ALUOp,PCSource,PCWriteCond,PCWrite,IorD,MemRead,MemWrite,MemtoReg,IRWrite);

  ALUControl alu_control_obj(clk,rst,funct,ALUOp,ALUopcode);
  
  ALU alu_obj(ALUSrcA,ALUSrcB,PC_out,A_out,B_out,constant,ALUopcode,Zero,ALUresult);
  
  ALUOut aluout(clk,rst,ALUresult,ALU_out);
 

endmodule