module RegFile(
    input clk,
	 input RegDst,
	 input MemtoReg,
    input [1:0] ALUOp,
	 input RegWrite,
    input [4:0] reg1,
    input [4:0] reg2,
	 input [4:0] reg3,
    input [31:0] ALU_out,
    input [31:0] MDR_out,
    output [31:0] regout1,
    output [31:0] regout2
    );

	wire [4:0] write_reg;
	assign write_reg = RegDst ? reg3 : reg2 ;

   wire [31:0] rwrite_data;
	assign rwrite_data = MemtoReg ?  MDR_out : ALU_out ;

   // just register file reading // instructions : store word and branch equal and some part of R type

	//                                      11            10                          01              00
  assign regout1 = ALUOp[1] ? (ALUOp[0] ?  RegFile[reg1]:RegFile[reg1] ):(ALUOp[0] ? RegFile[reg1] : {reg1[4]? 27'b1:27'b0 ,reg1});
  assign regout2 = RegFile[reg2];

   // reg file write // instruction : load word and R type
  
	always@(posedge clk)
   begin
      if (RegWrite == 1)  //R type and lw     
			RegFile[write_reg] <= rwrite_data;
   end
	
  reg [31:0] RegFile [9:0];           //base line of code for the creation of REGISTER FILE//
   initial                            //declaration of REGISTER FILE done at start//
   begin
    RegFile[0] = 32'd7;
    RegFile[1] = 32'd9;
    RegFile[2] = 32'd0;
    RegFile[3] = 32'd0;
    RegFile[4] = 32'd0;
    RegFile[5] = 32'd0;
    RegFile[6] = 32'd0;
    RegFile[7] = 32'd0;
    RegFile[8] = 32'd0;
    RegFile[9] = 32'd0;
   end
	
endmodule